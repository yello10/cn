ecieved response
Recieved response
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {

    int n,MSS,ISN;
    printf("Enter n  MSS  ISN\n");
    scanf("%d%d%d",&n,&MSS,&ISN);
    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == -1) {
        perror("Error creating socket");
        exit(1);
    }


    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(2112);

    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error binding");
        close(serverSocket);
        exit(1);
    }


    if (listen(serverSocket, 5) == -1) {
        perror("Error listening");
        close(serverSocket);
        exit(1);
    }

    printf("Server is waiting for connections...\n");

    struct sockaddr_in clientAddr;
    socklen_t clientAddrLen = sizeof(clientAddr);
    int clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &clientAddrLen);
    if (clientSocket == -1) {
        perror("Error accepting connection");
        close(serverSocket);
        exit(1);
    }

    printf("Client connected.\n");
    int arr[2];
    int out[]={0,0,99};
    recv(clientSocket,arr,sizeof(arr),0);
    printf("Received : ACK : %d AW : %d",arr[0],arr[1]);
    for(int i=0;i<arr[1];i+=100) {
            out[0]+=100;
            out[1]=out[0];
            out[2]+=100;
            send(clientSocket,out,sizeof(out),0);
    }

    close(clientSocket);
    close(serverSocket);

    return 0;
}






#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
     int m,i1,j,k;
     printf("Enter m  i  j  k\n");
     scanf("%d%d%d%d",&m,&i1,&j,&k);
     int arr[]={-1,0};
     arr[1]=m;
     int clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == -1) {
        perror("Error creating socket");
        exit(1);
    }


    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    serverAddr.sin_port = htons(2112);

    if (connect(clientSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error connecting to server");
        close(clientSocket);
        exit(1);
    }
    int seq[10],ds[10],de[10];
    printf("Connected to the server.\n");
    send(clientSocket,arr,sizeof(arr),0);
    int l=0;
    int ar1[3];
    for(int i=0;i<m;i+=100) {
            recv(clientSocket,ar1,sizeof(ar1),0);
            printf("Received : Seq: %d , Data : %d-%d\n",ar1[0],ar1[1],ar1[2]);
            seq[l]=ar1[0];
            ds[l]=ar1[1];
            de[l]=ar1[2];
            if(l==k-1) {
                    seq[l]=0;
                    ds[l]=0;
                    de[l]=0;
            }
            l++;
            ar1[0]=0;
            ar1[1]=0;
            ar1[2]=0;
    }
    int z=0;
    for(int i=0;i<=l;i++) {
            if(seq[z]!=0) {
                    arr[0]=seq[i]+100;
                    z++;
            }
            else {

            if(arr[0]%j!=0) arr[1]-=100;
            else arr[1]-=100+i1;
            send(clientSocket,arr,sizeof(arr),0);
    }
    }
    close(clientSocket);

    return 0;
}
